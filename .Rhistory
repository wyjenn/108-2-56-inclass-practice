student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
library(purrr)
library(purrr)
library(purrr)
studentSequence <- 1:length(examSubmissionTime$section)
library(purrr)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
a=20
b=10
square<-2*ab
a=20
b=10
square<-2*a*b
square
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<--2*a*c
square3<--2*b*c
surface_A<-square1+square2+square3
surface_A
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
surface_A
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
class(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
as.integer(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
as.integer(surface_A)
class(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
surface_A
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
}
surface_cube(20,10,15)
# surface_cube
surface_cube(20,10,15)
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
}
surface_cube(20,10,15)
surface_cube
# surface_cube
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
return(surface)
}
surface_cube(20,10,15)
# surface_cube
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
return(surface)
}
surface_cube(20,10,15)
surface_cube
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
View(Mask)
View(Mask)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYear, major)) ->
list_major1_allYears # 經濟系
View(courseStructure)
knitr::opts_chunk$set(echo = TRUE)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
str(courseStructure)
year1<-courseStructure$學年=100[["經濟系1"]]
year1<-courseStructure$學年=100
pick_year1<-courseStructure$學年=="100"
year1<-pick_year1[["經濟系1"]]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
year1
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
year1
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)
pick_year1
pick_grade1
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
get_courses <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
year1=一年級不重覆科目名稱（class character）,
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1" pick_course<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
pick_year2<-courseStructure$學年=="101"
pick_grade2<-courseStructure$應修系級=="經濟系2"
pick_year3<-courseStructure$學年=="103"
pick_grade3<-courseStructure$應修系級=="經濟系3"
pick_year4<-courseStructure$學年=="104"
pick_grade4<-courseStructure$應修系級=="經濟系4"
pick_course<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_course
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
pick_year2<-courseStructure$學年=="101"
pick_grade2<-courseStructure$應修系級=="經濟系2"
pick_year3<-courseStructure$學年=="103"
pick_grade3<-courseStructure$應修系級=="經濟系3"
pick_year4<-courseStructure$學年=="104"
pick_grade4<-courseStructure$應修系級=="經濟系4"
pick_course<-courseStructure$科目名稱[[pick_year1 & pick_grade1]]
entranceYears=100
majors="經濟系1"
pick_course<-courseStructure$科目名稱[courseStructure$學年==entranceYears & courseStructure$應修系級==majors]
pick_course
pick_6.8 <- studentHeights$年齡層 == "6-8"
pick_9.12 <- studentHeights$年齡層 == "9-12"
pick_13.15 <- studentHeights$年齡層 == "13-15"
pick_total <- studentHeights$類別 == "總計"
averageHeightByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_total]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_total]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_total])
)
# averageHeightByGroup
pick_6.8 <- studentHeights$年齡層 == "6-8"
pick_9.12 <- studentHeights$年齡層 == "9-12"
pick_13.15 <- studentHeights$年齡層 == "13-15"
pick_total <- studentHeights$類別 == "總計"
averageHeightByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_total]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_total]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_total])
)
averageHeightByGroup
studentHeights$平均身高[pick_6.8 & pick_total]
knitr::opts_chunk$set(echo = TRUE)
(stringr)
library(lubridate)
library(purrr)
library(magrittr)
library(stringr)
library(lubridate)
library(purrr)
library(magrittr)
n<- 540
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
grades <- c(52, 77, 59, 88, 90)
ifelse(grades >= 60, "及格", "不及格")
miniFun <- function() {
lubridate::now()
}
miniFun()
miniFun2 <- function() lubridate::now()
miniFun2()
result <- {
x <- 2
y <- 3
x^y + 15
}
print(result)
result2 <- {
x <- 2
y <- 3
if (x < 3) {
warning("x值太小")
} else {
x^y + 15
}
}
print(result2)
myFun <- function(x, y) {
return(x^y + 15)
}
# 等同於
myFun2 <- function(x, y) {
x^y + 15
}
outcome <- myFun(5, 3)
outcome2 <- myFun2(5, 3)
print(outcome)
print(outcome2)
a <- c(1, 2, 3)
cut(a, c(1, 2, 3))
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
# 有回存時要螢幕印出的訊息一定要加print
letterGrade
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
# 有回存時要螢幕印出的訊息一定要加print
letterGrade  <- switch(as.character(grade[[1]]),
`(-1,69]` = {
print("-_-")
"F"
}, `(69,79]` = {
print("棒")
"C"
}, `(79,89]` = {
print("好棒")
"B"
}, `(89,100]` = {
print("好棒棒")
"A"
})
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz = "Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <- c(glue("{today()} 06:00:00"), glue("{today()} 09:00:00"), glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"), glue("{today()} 23:30:00"), glue("{today()+days(1)} 01:00:00"))
cutpoints <- cutpoints %>% ymd_hms(tz = "Asia/Taipei")
## 將nowtime轉成它對應的時段是'morning', 'evening', 或其他。
nowtime <- cut(nowtime, cutpoints)
levels(nowtime)[c(1, 3, 5)] <- c("morning", "evening", "jazz time")
## 使用switch決定要做什麼事
switch(as.character(nowtime), morning = {
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
}, evening = {
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
}, `jazz time` = {
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}, {
print("機器人要休息，饒了我吧～～")
})
whatNeedToDo_butler_mom <- function(nowtime = now()) {
library(lubridate)
library(glue)
cutpoints <- c(glue("{today()} 06:00:00"), glue("{today()} 09:00:00"), glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"), glue("{today()} 23:30:00"), glue("{today()+days(1)} 01:00:00"))
cutpoints <- cutpoints %>% ymd_hms(tz = "Asia/Taipei")
nowtime <- cut(nowtime, cutpoints)
levels(nowtime)[c(1, 3, 5)] <- c("morning", "evening", "jazz time")
switch(as.character(nowtime), morning = {
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
}, evening = {
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
}, `jazz time` = {
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}, {
print("機器人要休息，饒了我吧～～")
})
}
ymd_hms(glue::glue("{today()} 08:00:00"), tz = "Asia/Taipei") %>% whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()} 14:00:00"), tz = "Asia/Taipei") %>% whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()} 18:00:00"), tz = "Asia/Taipei") %>% whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()+days(1)} 00:20:00"), tz = "Asia/Taipei") %>% whatNeedToDo_butler_mom()
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(lubridate)
library(purrr)
library(magrittr)
library(lubridate)
library(magrittr)
library(stringr)
library(lubridate)
library(purrr)
library(magrittr)
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){ # 只取用第一個T/F
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(all(myAnswer == correctAnswer)){ # 要全TRUE
print("你答對了")
}
if(any(myAnswer == correctAnswer)){ # 只要有一個TRUE
print("裡頭有數字是對的")
}
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}-> myGrade
myGrade
##只有一個&同時進行
if(is.factor(myAnswer) & all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}-> myGrade
myGrade
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
x <- c(2,5,10,-21,3,8)
ifelse(x %% 2==0, "even", "odd")
y <- sample(40:100,20, replace=T)
dplyr::case_when(
y < 60 ~ "F",
60<=y & y < 70 ~"D",
71<=y & y < 80 ~"C",
80<=y & y < 90 ~"B",
90<=y ~ "A"
)
