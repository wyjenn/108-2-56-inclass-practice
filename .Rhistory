npw<- with_tz(now(),tz=tzone)
return(now)
}
what_time_it_is("Europe/Paris")
library(lubridate)
what_time_it_is<-function(timezone){
now<-with_tz(now(),tz=timezone)
return(now)}
what_time_it_is("Europe/Paris")
library(lubridate)
what_time_it_is<-
function(timezone){
npw<- with_tz(now(),tz=timezone)
return(now)
}
what_time_it_is("Europe/Paris")
library(lubridate)
what_time_it_is<-
function(tzone){
now<- with_tz(now(),tz=tzone)
return(now)
}
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
library(global)
library(globals)
(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
library(codetools)
(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號(單獨執行)
readline(prompt = "請輸入你的學號") -> studentId
410784001
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號(單獨執行)
readline(prompt = "請輸入你的學號") -> studentId
studentId
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號(單獨執行)
readline(prompt = "請輸入你的學號") -> studentId
studentId
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
knitr::opts_chunk$set(echo = TRUE)
studentSequence <- 1:length(examSubmissionTime$section)
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
library(purrr)
library(purrr)
library(purrr)
studentSequence <- 1:length(examSubmissionTime$section)
library(purrr)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
a=20
b=10
square<-2*ab
a=20
b=10
square<-2*a*b
square
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<--2*a*c
square3<--2*b*c
surface_A<-square1+square2+square3
surface_A
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
surface_A
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
class(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
as.integer(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
as.integer(surface_A)
class(surface_A)
# surface_A
a=20
b=10
c=15
square1<-2*a*b
square2<-2*a*c
square3<-2*b*c
surface_A<-square1+square2+square3
surface_A
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
}
surface_cube(20,10,15)
# surface_cube
surface_cube(20,10,15)
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
}
surface_cube(20,10,15)
surface_cube
# surface_cube
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
return(surface)
}
surface_cube(20,10,15)
# surface_cube
surface_cube <-
function(a,b,c){
surface <-2*a*b+2*a*c+2*b*c
return(surface)
}
surface_cube(20,10,15)
surface_cube
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
View(Mask)
View(Mask)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYear, major)) ->
list_major1_allYears # 經濟系
View(courseStructure)
knitr::opts_chunk$set(echo = TRUE)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
str(courseStructure)
year1<-courseStructure$學年=100[["經濟系1"]]
year1<-courseStructure$學年=100
pick_year1<-courseStructure$學年=="100"
year1<-pick_year1[["經濟系1"]]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
year1
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
year1
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)
pick_year1
pick_grade1
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
get_courses <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
year1=一年級不重覆科目名稱（class character）,
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
year1<-courseStructure$科目名稱[pick_year1 & pick_grade1]
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1" pick_course<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
pick_year2<-courseStructure$學年=="101"
pick_grade2<-courseStructure$應修系級=="經濟系2"
pick_year3<-courseStructure$學年=="103"
pick_grade3<-courseStructure$應修系級=="經濟系3"
pick_year4<-courseStructure$學年=="104"
pick_grade4<-courseStructure$應修系級=="經濟系4"
pick_course<-courseStructure$科目名稱[pick_year1 & pick_grade1]
pick_course
pick_year1<-courseStructure$學年=="100"
pick_grade1<-courseStructure$應修系級=="經濟系1"
pick_year2<-courseStructure$學年=="101"
pick_grade2<-courseStructure$應修系級=="經濟系2"
pick_year3<-courseStructure$學年=="103"
pick_grade3<-courseStructure$應修系級=="經濟系3"
pick_year4<-courseStructure$學年=="104"
pick_grade4<-courseStructure$應修系級=="經濟系4"
pick_course<-courseStructure$科目名稱[[pick_year1 & pick_grade1]]
entranceYears=100
majors="經濟系1"
pick_course<-courseStructure$科目名稱[courseStructure$學年==entranceYears & courseStructure$應修系級==majors]
pick_course
pick_6.8 <- studentHeights$年齡層 == "6-8"
pick_9.12 <- studentHeights$年齡層 == "9-12"
pick_13.15 <- studentHeights$年齡層 == "13-15"
pick_total <- studentHeights$類別 == "總計"
averageHeightByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_total]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_total]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_total])
)
# averageHeightByGroup
pick_6.8 <- studentHeights$年齡層 == "6-8"
pick_9.12 <- studentHeights$年齡層 == "9-12"
pick_13.15 <- studentHeights$年齡層 == "13-15"
pick_total <- studentHeights$類別 == "總計"
averageHeightByGroup <- c(
`6-8`=mean(studentHeights$平均身高[pick_6.8 & pick_total]),
`9-12`=mean(studentHeights$平均身高[pick_9.12 & pick_total]),
`13-15`=mean(studentHeights$平均身高[pick_13.15 & pick_total])
)
averageHeightByGroup
studentHeights$平均身高[pick_6.8 & pick_total]
