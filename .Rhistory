str_replace(egg, "雞蛋", "荷包蛋")
}
# external dispatch
eggs[[1]] %>% fryEgg(.)
library(stringr)
library(stringr)
eggs <- rep("雞蛋x1", 8)
fryEgg <- function(egg){
str_replace(egg, "雞蛋", "荷包蛋")
}
# external dispatch
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)
map(eggs, ~fryEgg(.x)) -> friedEggs1
# internal dispatch
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}
map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else(grade_i < 60 ) {
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else (grade_i < 60 ) {
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-1
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
}
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
warning("不是vectorised function")
pass_or_fail(grade)
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}
map(grade, ~{pass_or_fail(.)}) # map to list
map_chr(grade, ~{pass_or_fail(.)}) # map to atom. vectof of class character
map_pass_fail <- function(grade){
map_chr(grade, ~{pass_or_fail(.)})
}
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
if(is.null(ham) || !str_detect(ham, "火腿")){stop("少了火腿")}
"火腿蛋三明治"
}
# 土司、火腿、蛋 第一份出列
1 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第二份出列
2 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第三份出列
3 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
##hard labour
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
get_courses(acadYear_i, grade_i, courseStructure)
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
return(
unique(courseStructure$科目名稱[pick])
)
}
# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
get_courses(acadYear_i, grade_i, courseStructure)
# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
get_courses(acadYear_i, grade_i, courseStructure)
# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
get_courses(acadYear_i, grade_i, courseStructure)
# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
get_courses(acadYear_i, grade_i, courseStructure)
# 100學年 1年級
get_courses(academicYears[[1]], allGrades[[1]], courseStructure)
# 101學年 2年級
get_courses(academicYears[[2]], allGrades[[2]], courseStructure)
# 102學年 3年級
get_courses(academicYears[[3]], allGrades[[3]], courseStructure)
# 103學年 4年級
get_courses(academicYears[[4]], allGrades[[4]], courseStructure)
1 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
2 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
3 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
4 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
1:4 %>%
map(~{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)})
knitr::opts_chunk$set(echo = TRUE)
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
return(
unique(courseStructure$科目名稱[pick])
)
}
# 前置作業，接map iteration
map(1:4,
~{
get_courses(academicYears[[.x]],
allGrades[[.x]],
courseStructure)})
# 前置作業，接map iteration
library(purrr)
# 前置作業，接map iteration
library(purrr)
map(1:4,
~{
get_courses(academicYears[[.x]],
allGrades[[.x]],
courseStructure)})
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
library(stringr)
library(purrr)
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
return(
unique(courseStructure$科目名稱[pick])
)
}
# 前置作業，接map iteration
map(1:4,
~{
get_courses(academicYears[[.x]],
allGrades[[.x]],
courseStructure)})
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
if(is.null(ham) || !str_detect(ham, "火腿")){stop("少了火腿")}
"火腿蛋三明治"
}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
utput <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
a <- sample(1:100, 10, replace=T)
print(a)
sum <- 0
for(.x in 1:10){
sum <- sum+a[[.x]]
}
print(sum)
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
seq_along(collectionHWs)
knitr::opts_chunk$set(echo = TRUE)
sum<-0  #幾次正面
count<-0 #擲了幾次骰
newToss <- sample(c("正","反"), 1, replace=T)
sum<-0  #幾次正面
count<-0 #擲了幾次骰
newToss <- sample(c("正","反"), 1, replace=T)
sum<-0  #幾次正面
count<-0 #擲了幾次骰
newToss <- sample(c("正","反"), 1, replace=T)
#1st toss
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){sum<-sum+1}
sum<-0  #幾次正面
count<-0 #擲了幾次骰
newToss <- sample(c("正","反"), 1, replace=T)
#1st toss
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
print(newToss)
if(newToss=="正"){sum<-sum+1}
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
print(newToss)
if(newToss=="正"){sum<-sum+1}
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
print(newToss)
if(newToss=="正"){sum<-sum+1}
sum<-0  #幾次正面
count<-0 #擲了幾次骰
for (.x in 1:100) {
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
if(sum==5){
break
}
}
sum<-0  #幾次正面
count<-0 #擲了幾次骰
while (sum!=5) { ##留在迴圈條件
count<-count+1 #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(continueCondition && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(sum!=5 && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(sum!=5 && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(sum!=5 && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
sum<-0  #幾次正面
count <- 0 # 計數器開始值
max_count <- 500 # 計數上限
while(sum!=5 && count <= max_count){ # 增加計數上限條件
count <- count+1 # 計數器加1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss=="正"){
sum<-sum+1
}
}
