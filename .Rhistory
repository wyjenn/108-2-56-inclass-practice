averageHeightByGroup
class(averageHeightByGroup)
length(averageHeightByGroup)
studentHeights$`年齡層`->age
pick_6to8 <- age == "6-8"
pick_9to12<-age=="9-12"
pick_13to15<-age=="13-15"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8])
`9-12`<-mean(studentHeights$`平均身高`[pick_9to12])
`13-15` <-mean(studentHeights$`平均身高`[pick_13to15])
averageHeightByGroup<-c(`6-8`,`9-12`,`13-15`)
averageHeightByGroup<-as.numeric(averageHeightByGroup)
averageHeightByGroup
length(averageHeightByGroup)
str(studentHeights)
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
#averageHeightByGroup
# heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
print(`6-8`)
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
`6-8`
# heightDifferenceByGroup
`6-8`
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8][pick_male])-mean(studentHeights$`平均身高`[pick_6to8][pick_female])
`6-8`
# heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8][pick_male])-mean(studentHeights$`平均身高`[pick_6to8][pick_female])
`6-8`
# heightDifferenceByGroup
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
factor_studentHeights<-factor(studentHeights$`學年度`,studentHeights$`年齡`)
studentHeights<-levels(factor_studentHeights)
studentHeights
factor_studentHeights1<-factor(studentHeights$`年齡層`)
studentHeights$`年齡層`<-levels(factor_studentHeights1)
studentHeights$`年齡層`
studentHeights$`年齡層`->age
pick_6to8 <- age == "6-8"
pick_9to12<-age=="9-12"
pick_13to15<-age=="13-15"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8])
`9-12`<-mean(studentHeights$`平均身高`[pick_9to12])
`13-15` <-mean(studentHeights$`平均身高`[pick_13to15])
averageHeightByGroup<-c(`6-8`,`9-12`,`13-15`)
averageHeightByGroup<-as.numeric(averageHeightByGroup)
averageHeightByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8][pick_male])-mean(studentHeights$`平均身高`[pick_6to8][pick_female])
`6-8`
# heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8,pick_male])-mean(studentHeights$`平均身高`[pick_6to8,pick_female])
`6-8`
# heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
`6-8`
# heightDifferenceByGroup
`6-8`
studentHeights$`年齡層`->age
pick_6to8 <- age == "6-8"
pick_9to12<-age=="9-12"
pick_13to15<-age=="13-15"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8])
`9-12`<-mean(studentHeights$`平均身高`[pick_9to12])
`13-15` <-mean(studentHeights$`平均身高`[pick_13to15])
averageHeightByGroup<-c(`6-8`,`9-12`,`13-15`)
averageHeightByGroup<-as.numeric(averageHeightByGroup)
averageHeightByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
`9-12`<-`9-12`[pick_male]-`9-12`[pick_female]
`13-15`<-`13-15`[pick_male]-`13-15`[pick_female]
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
heightDifferenceByGroup<-as.numeric(heightDifferenceByGroup)
heightDifferenceByGroup
# heightDifferenceByGroup
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
studentHeights$`年齡層`->age
pick_6to8 <- age == "6-8"
pick_9to12<-age=="9-12"
pick_13to15<-age=="13-15"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8])
`9-12`<-mean(studentHeights$`平均身高`[pick_9to12])
`13-15` <-mean(studentHeights$`平均身高`[pick_13to15])
averageHeightByGroup<-c(`6-8`,`9-12`,`13-15`)
averageHeightByGroup<-as.numeric(averageHeightByGroup)
averageHeightByGroup
mean(studentHeights$`平均身高`[pick_female])
height_female<-studentHeights$`平均身高`[pick_female]
height_male<-studentHeights$`平均身高`[pick_male]
height_female
height_male[pick_6to8]
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
height_female<-studentHeights$`平均身高`[pick_female]
height_male<-studentHeights$`平均身高`[pick_male]
`6-8`<-mean(height_male[pick_6to8])-mean(height_female[pick_6to8])
`9-12`<-mean(height_male[pick_9to12])-mean(height_female[pick_9to12])
`13-15`<-mean(height_male[pick_13to15])-mean(height_female[pick_13to15])
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
heightDifferenceByGroup<-as.numeric(heightDifferenceByGroup)
heightDifferenceByGroup
# heightDifferenceByGroup
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
`6-8`<-mean(height_male[pick_6to8])-mean(height_female[pick_6to8])
`9-12`<-mean(height_male[pick_9to12])-mean(height_female[pick_9to12])
`13-15`<-mean(height_male[pick_13to15])-mean(height_female[pick_13to15])
`6-8`
mean(height_male[pick_6to8])
studentHeights$`年齡層`->age
pick_6to8 <- age == "6-8"
pick_9to12<-age=="9-12"
pick_13to15<-age=="13-15"
`6-8`<-mean(studentHeights$`平均身高`[pick_6to8])
`9-12`<-mean(studentHeights$`平均身高`[pick_9to12])
`13-15` <-mean(studentHeights$`平均身高`[pick_13to15])
averageHeightByGroup<-c(`6-8`,`9-12`,`13-15`)
averageHeightByGroup<-as.numeric(averageHeightByGroup)
averageHeightByGroup
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
print(`6-8`)
`6-8`<-`6-8`[pick_male]-`6-8`[pick_female]
`9-12`<-`9-12`[pick_male]-`9-12`[pick_female]
`13-15`<-`13-15`[pick_male]-`13-15`[pick_female]
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
`6-8`<-mean(height_male[pick_6to8])-mean(height_female[pick_6to8])
`9-12`<-mean(height_male[pick_9to12])-mean(height_female[pick_9to12])
`13-15`<-mean(height_male[pick_13to15])-mean(height_female[pick_13to15])
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
heightDifferenceByGroup<-as.numeric(heightDifferenceByGroup)
heightDifferenceByGroup
# heightDifferenceByGroup
studentHeights$`類別`->gender
pick_female<-gender=="女"
pick_male<-gender=="男"
height_male<-studentHeights$`平均身高`[pick_male]
height_female<-studentHeights$`平均身高`[pick_female]
`6-8`<-mean(height_male[pick_6to8])-mean(height_female[pick_6to8])
`9-12`<-mean(height_male[pick_9to12])-mean(height_female[pick_9to12])
`13-15`<-mean(height_male[pick_13to15])-mean(height_female[pick_13to15])
heightDifferenceByGroup<-c(`6-8`,`9-12`,`13-15`)
heightDifferenceByGroup<-as.numeric(heightDifferenceByGroup)
heightDifferenceByGroup
# heightDifferenceByGroup
# realEstateRegex
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
str(differentMajors)
realEstateRegex<-"(?=不動系)"
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex<-"(?<=不動系)"
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex<-"(不動系?)"
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
differentMajors<-factor(differentMajors)
currentLevels<-levels(differentMajors)
currentLevels
currentLevels
bSchool<-"[商學院]"
bSchool
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
bSchoolRegex<-"[商學院]"
bSchoolRegex
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
differentMajors->factor(differentMajors)
currentLevels<-levels(differentMajors)
currentLevels
bSchoolRegex<-"[商學院]"
bSchoolRegex
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
differentMajors<-factor(differentMajors)
currentLevels<-levels(differentMajors)
currentLevels
bSchoolRegex<-"[商學院]"
bSchoolRegex
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example,~.x[pick_小新])->data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance,~x[title])->dance_titled
map(dance,~.x[title])->dance_titled
map(dance,~.x$title)->dance_titled
View(dance_titled)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo))
map(dance,~length(.x$showInfo))-> list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo,~.x$time)->list_show_dance4
list_show_dance4
num<-c(2,5,7,1,3)
num[[1]]+3
num[[2]]+3
num[[3]]+3
num[[4]]+3
num[[5]]+3
map(num,~.x+3)
map(dance[[8]]$showInfo,~.x$time)
map(dance[[8]]$showInfo,~.x$location)
knitr::opts_chunk$set(echo = TRUE)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
sort(threeHeigths,decreasing = T)%>%
names(.)%>%
.[[1]]->highestPerson
print(highestPerson)
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
regionLevels
levels(region) %>%
str_replace(.,"台北","北部")%>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部")%>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") -> levels(region)
region
levels(region) %>%
str_replace(.,"台北","北部")%>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") -> levels(region)
levels(region)
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
regionLevels
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region)
levels(region) %>%
str_replace(.,"台北","北部")%>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") -> levels(region)
region
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
regionLevels
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths <- c(Gary=178, John=182, Cam=175)
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
population %>%
sort()%>%
names()%>%
factor(cities,levels = .)->cities
population %>%
sort()%>%
names()%>%
factor(cities,levels = .)->cities
cities
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
cities
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
library(purrr)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
library(purrr)
library(purrr)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
map(dataList, is.numeric) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
map(dataList, is.numeric) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
bigNumber
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(purrr)
library(jsonlite)
library(jsonlite)
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview", simplifyDataFrame = F) -> busRoutes
str(busRoutes)
View(busRoutes)
map(busRoutes,~.x$id)
map(busRoutes,~.x$providerId)
map(busRoutes,~.x$providerName)
map(busRoutes,~.x$nameZh)
map(busRoutes,~.x$Id)
map(busRoutes,~.x$providerId)
map(busRoutes,~.x$providerName)
map(busRoutes,~.x$nameZh)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
str(weather_next36hours)
map(weather_next36hours[[1]][[10]]$location,~.x$locationName)
weather_next36hours[[1]][[10]]$location$locationName
weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[2]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[2]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[3]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[2]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[3]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[4]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[2]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[3]]$elementName
weather_next36hours[[1]][[10]]$location$weatherElement[[4]]$elementName
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$elementName)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$time,~.x$startTime)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$time,~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$[[1]]$timestartTime)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement[[1]]$time,~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$[[1]]$time$startTime)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement$time[[1]],~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$$time[[1]]$startTime)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement$time[[1]],~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$time[[1]]$startTime)
#預告開始時間
map(weather_next36hours[[1]][[10]]$location$weatherElement$time[[1]],~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$time[[1]]$startTime)
#預告結束時間
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$time[[1]]$endTime)
#預告開始時間
#map(weather_next36hours[[1]][[10]]$location$weatherElement$time[[1]],~.x$startTime)
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$time[[1]]$startTime)
#預告結束時間
map(weather_next36hours[[1]][[10]]$location$weatherElement,~.x$time[[1]]$endTime)
#這段時間的最高氣溫
map(weather_next36hours[[1]][[10]]$location$weatherElement$parameter,~max(.x$parameterName))
#這段時間的最高氣溫
map(weather_next36hours[[1]][[10]]$location$weatherElement,~max(.x$time[[1]]$parameter$parameterName))
#這段時間的最高氣溫
map(weather_next36hours[[1]][[10]]$location$weatherElement,~max(.x$time[[1]]$parameter$parameterValue))
#這段時間的最高氣溫
map(weather_next36hours[[1]][[10]]$location$weatherElement,~max(.x$time[[1]]$parameter$parameterValue))
map(weather_next36hours$cwbopendata$dataset$location$weatherElement, ~max(.x$time[[1]]$parameter$parameterValue))
str(weather_next36hours)
#這段時間的最高氣溫
map(weather_next36hours[[1]][[10]]$location$weatherElement,~max(.x$time[[1]]$parameter$parameterValue))
map(weather_next36hours[[1]][[10]]$location$weatherElement,~max(.x$time[[2]]$parameter$parameterName))
